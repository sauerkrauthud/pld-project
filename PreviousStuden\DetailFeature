import numpy as np
import datetime
import os
import time
'''
def startFeature():
    stdLevel = str(input("Please enter your student level here (G for Graduate, U for Undergraduate, B for Both): "))
    if stdLevel == "U":
        stdDegree = "N/A - Undergraduate."
        stdID = int(input("Please enter your student ID number here: (ie: 2020006000): "))
    if stdLevel == "G" or stdLevel == "B":
        stdDegree = str(input("Are you taking a Masters, a Doctorate, or Both? (M for Masters, D for Doctorate and B0 for Both): "))
        stdID = int(input("Please enter your student ID number here: (ie: 2020006000): "))
'''

#Details Feature
#
def detailsFeature(student_id):
    # Load the student details CSV into a NumPy array
    try:
        data = np.genfromtxt('studentDetails.csv', delimiter=',', dtype=None, encoding='utf-8', names=True)
    except Exception as e:
        print(f"Error loading CSV file: {e}")
        return

    # Iterate through each student in the NumPy array
    for row in data:
        # Check if the student ID matches the given ID
        if row['stdID'] == student_id:
            # Prepare the details in the required format (one line per record)
            student_details = (
                f"Name: {row['Name']}, "
                f"\nStudent ID: {row['stdID']}, "
                f"\nLevels: {row['Level']}, "
                f"\nNumber of terms: {row['Terms']}, "
                f"\nCollege(s): {row['College']}, "
                f"\nDepartment(s): {row['Department']}"
            )

            # Print to console
            print(student_details)

            # Create the file name based on student ID
            file_name = f"std{row['stdID']}details.txt"

            # Write the details to the text file
            with open(file_name, "w") as txt_file:
                txt_file.write(student_details)

            print(f"Student details have been saved to {file_name}.")

            # Wait for a few seconds before clearing the screen
            time.sleep(3)

            # Clear the console (works differently depending on the OS)
            os.system('cls' if os.name == 'nt' else 'clear')

            # Redirect to the menu
            print("Redirecting to the menu...")
            time.sleep(2)  # Pause briefly before redirecting
            return

    # If student ID is not found
    print("Student ID not found.")
    time.sleep(2) 

#previous feature
#note need maglagay ng lists sa menufeature para gumana 

def previousRequestsFeature(request_history, dates, times, stdID):
    # Ensure the input lists are not empty
    if not request_history or not dates or not times:
        print("No request history available.")
        time.sleep(2)
        return

    # Show the request history on the screen
    print("\nPrevious Transcript Requests")
    print("Request\tDate\tTime")
    print("======================================")
    for i in range(len(request_history)):
        print(f"{request_history[i]}\t{dates[i]}\t{times[i]}")

    # Ask if the user wants to save the request history to a file
    save_to_file = input("Would you like to save this request history to a file? (Y/N): ").strip().lower()

    if save_to_file == 'y':
        file_name = f"std{stdID}PreviousRequests.txt"

        # Check if the file already exists
        file_exists = os.path.exists(file_name)

        # Prepare the content for the file
        content = ""
        if not file_exists:
            content += "Request\tDate\tTime\n"
            content += "======================================\n"

        for i in range(len(request_history)):
            content += f"{request_history[i]}\t{dates[i]}\t{times[i]}\n"

        # Append the content to the file
        with open(file_name, "a") as file:
            file.write(content)

        print(f"Request history has been {'updated' if file_exists else 'saved'} to {file_name}.")
    else:
        print("Request history was not saved to a file.")

    # Pause for a few seconds, clear the screen, and redirect to the menu
    input("Press Enter to return to the menu.")
    time.sleep(3)
    os.system('cls' if os.name == 'nt' else 'clear')


def MajorTranscript():
    # Example implementation of generating a Major Transcript
    print("Generating Major Transcript...")
    # Add your logic here for Major Transcript generation


def menuFeature():
    
    
    #std id example
    #need sya as integer
    stdID = 201009000
    #

    # Lists to hold the request data
    request_history = []
    dates = []
    times = []

    # Get current time for timestamp
    now = datetime.datetime.now()

    # Format time in 12-hour format with AM/PM
    formatted_time = now.strftime("%I:%M %p")
    


    confirm = True
    while confirm:
        print("Student Transcript Generation System")
        print("======================================")
        print("1. Student Details")
        print("2. Statistics")
        print("3. Transcript based on Major Courses")
        print("4. Transcript based on Minor Courses")
        print("5. Full Transcript")
        print("6. Previous Transcript Requests")
        print("7. Select Another Student")
        print("8. Terminate the System")
        print("======================================")
        try:
            option = int(input("Enter Your Feature: "))
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 8.")
            continue

        if 1 <= option <= 8:
            if option == 1:
                detailsFeature(stdID)
                # number is just an example, needs to be a variable in menufeature
            elif option == 2:
                print("kys")  # Replace this with actual functionality
            elif option == 3:
                MajorTranscript()
                request_history.append("Major")
                dates.append(str(now.date()))
                times.append(formatted_time)  
            elif option == 6:
                previousRequestsFeature(request_history, dates, times, stdID) 
            elif option == 8:
                terminateFeature(request_history)
                confirm = False
        else:
            print("Invalid option. Please try again.")
            continue





def terminateFeature(request_history):
    print("======================================")
    print(f"Number of requests: {len(request_history)}")


menuFeature()
